@page "/journey/hunts"
@using PadWiki.WebApp.Resources
@using PadWiki.WebApp.Entities

<MudPaper Height="100%" Style="overflow: scroll;">
    <MudAlert Severity="Severity.Info">@Resources.IncommingImprovement</MudAlert>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<Cave>>>(ServerReload))"
              Dense="true" Hover="true" @ref="table">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer/>
            <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="nr_field" T="Cave">Id</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="sign_field" T="Cave">Title</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="name_field" T="Cave">Resume</MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="position_field" T="Cave">Description</MudTableSortLabel>
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Resume">@context.Resume</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
</MudPaper>

@code {
    private IEnumerable<Cave> pagedData;
    private MudTable<Cave> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<Cave>> ServerReload(TableState state)
    {
        IEnumerable<Cave> data = new[]
        {
            new Cave()
        };
        
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Title.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Resume.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Description.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{element.Id} {element.Title} {element.Resume} {element.Description}".Contains(searchString))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Title);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Resume);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Description);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Cave>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

}