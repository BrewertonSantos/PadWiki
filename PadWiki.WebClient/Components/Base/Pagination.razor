<nav aria-label="...">
    <ul class="pagination justify-content-end">
        <li class="page-item @(IsFirstPage() ? "disabled" : null)">
            <a class="page-link">Previous</a>
        </li>
        @foreach (var page in GetPages())
        {
            if (IsEllipsis(page))
            {
                <li class="page-item disabled">
                    <a class="page-link">...</a>
                </li>
            }
            else
            {
                <li class="page-item @(IsCurrentPage(page) ? "active" : null)">
                    <a class="page-link" href="#">@(page)</a>
                </li>
            }
        }
        <li class="page-item @(IsLastPage() ? "disabled" : null)">
            <a class="page-link" href="#">Next</a>
        </li>
    </ul>
</nav>

@code {

    [Parameter]
    public int Count { get; set; }

    [Parameter]
    public int CurrentPage { get; set; } = 1;

    [Parameter]
    public int PageSize { get; set; } = 10;

    [Parameter]
    public EventCallback<int> OnPageChanged { get; set; }

    private int _pageCount;

    protected override void OnParametersSet()
        => _pageCount = (int)Math.Ceiling(Count / (double)PageSize);

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > _pageCount)
            return;

        CurrentPage = page;
        await OnPageChanged.InvokeAsync(page);
    }

    private async Task PreviousPage() => await ChangePage(CurrentPage - 1);

    private async Task NextPage() => await ChangePage(CurrentPage + 1);

    private async Task FirstPage() => await ChangePage(1);

    private async Task LastPage() => await ChangePage(_pageCount);

    private bool IsFirstPage() => CurrentPage == 1;

    private bool IsLastPage() => CurrentPage == _pageCount;

    private bool IsCurrentPage(int page) => CurrentPage == page;

    private bool IsEllipsis(int page) => page == -1;

    private IEnumerable<int> GetPages()
    {
        var pages = new List<int>();
        var start = CurrentPage - 2;
        var end = CurrentPage + 2;
        if (start < 1)
        {
            end -= start - 1;
            start = 1;
        }
        if (end > _pageCount)
        {
            start -= end - _pageCount;
            end = _pageCount;
        }
        if (start < 1)
            start = 1;
        if (end > _pageCount)
            end = _pageCount;
        if (start > 1)
        {
            pages.Add(1);
            if (start > 2)
                pages.Add(-1);
        }
        for (var i = start; i <= end; i++)
            pages.Add(i);
        if (end < _pageCount)
        {
            if (end < _pageCount - 1)
                pages.Add(-1);

            pages.Add(_pageCount);
        }
        return pages;
    }

}